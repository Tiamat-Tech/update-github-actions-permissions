// @ts-nocheck
// eslint-disable
// This file is generated by create-validator-ts
import Ajv from "ajv";
import * as apiTypes from "./types";

const SCHEMA = {
    $schema: "http://json-schema.org/draft-07/schema#",
    definitions: {
        GitHubAction: {
            type: "object",
            properties: {
                permissions: {
                    anyOf: [
                        {
                            type: "string",
                            const: "read-all"
                        },
                        {
                            type: "string",
                            const: "write-all"
                        },
                        {
                            type: "object",
                            properties: {
                                actions: {
                                    type: "string",
                                    enum: ["none", "read", "write"]
                                },
                                checks: {
                                    type: "string",
                                    enum: ["none", "read", "write"]
                                },
                                contents: {
                                    type: "string",
                                    enum: ["none", "read", "write"]
                                },
                                "pull-requests": {
                                    type: "string",
                                    enum: ["none", "read", "write"]
                                },
                                deployments: {
                                    type: "string",
                                    enum: ["none", "read", "write"]
                                },
                                issues: {
                                    type: "string",
                                    enum: ["none", "read", "write"]
                                },
                                packages: {
                                    type: "string",
                                    enum: ["none", "read", "write"]
                                },
                                "repository-projects": {
                                    type: "string",
                                    enum: ["none", "read", "write"]
                                },
                                "security-events": {
                                    type: "string",
                                    enum: ["none", "read", "write"]
                                },
                                statuses: {
                                    type: "string",
                                    enum: ["none", "read", "write"]
                                }
                            },
                            additionalProperties: false
                        }
                    ]
                }
            },
            required: ["permissions"],
            additionalProperties: false
        },
        GitHubActions: {
            type: "object",
            additionalProperties: {
                anyOf: [
                    {
                        $ref: "#/definitions/GitHubAction"
                    },
                    {
                        type: "null"
                    }
                ]
            }
        }
    }
};
const ajv = new Ajv({ removeAdditional: true }).addSchema(SCHEMA, "SCHEMA");
export function validateGitHubAction(payload: unknown): apiTypes.GhPermissionsDefinition {
    if (!isGitHubAction(payload)) {
        const error = new Error("invalid payload: GitHubAction");
        error.name = "ValidationError";
        throw error;
    }
    return payload;
}

export function isGitHubAction(payload: unknown): payload is apiTypes.GhPermissionsDefinition {
    /** Schema is defined in {@link SCHEMA.definitions.GitHubAction } **/
    const ajvValidate = ajv.compile({ $ref: "SCHEMA#/definitions/GitHubAction" });
    return ajvValidate(payload);
}

export function validateGitHubActions(payload: unknown): apiTypes.GhPermissionsDefinitions {
    if (!isGitHubActions(payload)) {
        const error = new Error("invalid payload: GitHubActions");
        error.name = "ValidationError";
        throw error;
    }
    return payload;
}

export function isGitHubActions(payload: unknown): payload is apiTypes.GhPermissionsDefinitions {
    /** Schema is defined in {@link SCHEMA.definitions.GitHubActions } **/
    const ajvValidate = ajv.compile({ $ref: "SCHEMA#/definitions/GitHubActions" });
    return ajvValidate(payload);
}
